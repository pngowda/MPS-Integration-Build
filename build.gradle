import groovy.io.FileType
apply plugin: 'base'
apply plugin: 'maven-publish'
	
/*def mpsBuild='MPS-171.1448'
def mpsMajor ='2017.1'
def mpsDownloadDir = new File(System.getProperty("user.dir"), "MPS-171.1448")
def mpsDownloadFile = new File("MPS-171.1448.zip")
def eapSuffix = mpsBuild.contains("EAP") ? " EAP" : ""
def mpsUnpackedDir = new File(mpsDownloadDir, "MPS ${mpsMajor}${eapSuffix}")
def version '171.1448-SNAPSHOT'
*/

def mpsBuild
def mpsMajor
def mpsDownloadDir
def mpsDownloadFile
def eapSuffix
def String mpsUnpackedDir
def uploadVersion
def mpsVersion
def setMPSVersion



task MPSVersionTask {
	def mpsDistributionList=[20172]
	mpsDistributionList.each {
		def inputIOFileList=new ArrayList()
		def buildVersion
		if(it==35){
			println "MPS Build Version:20171"
			buildVersion="20171"
		}
		else {
			println "MPS Build Version:"+it
			buildVersion=it
		}
		def mpsVersionUrl="https://teamcity.jetbrains.com/guestAuth/app/rest/builds?pinned=true&status=SUCCESS&buildType=MPS_"+it+"_Distribution_DownloadableArtifacts&fields=build(number,status,lastChange,pinned)"
		def headers = [ Accept: 'application/xml']
		def xmlText = new URL(mpsVersionUrl).getText( requestProperties: headers )
		def parsedProjectXml = new XmlSlurper().parseText( xmlText )
		parsedProjectXml.build.each {
			build -> if((build.@pinned)=="true"){
					inputIOFileList.add(build.@number)
			}
		}
		mpsVersion=inputIOFileList.first()
		println "Last Pinned MPS Version for : "+buildVersion+"--> " +mpsVersion
		def mpsDownloadUrl='https://teamcity.jetbrains.com/guestAuth/repository/download/MPS_'+it+'_Distribution_DownloadableArtifacts/.lastPinned/'+mpsVersion+'.zip'
		downloadMPS(mpsDownloadUrl,mpsVersion)
		mpsDownloadDir = new File(System.getProperty("user.dir"), mpsVersion.toString())


		println "....."+ mpsVersion.toString()
		mpsDownloadFile = new File(mpsVersion.toString()+".zip")
	}
}

def downloadMPS(mpsDownloadUrlPath,mpsVersionString){
	def url = mpsDownloadUrlPath
	def file = new File(mpsVersionString.toString()+'.zip').newOutputStream()
	file << new URL(url).openStream()
	file.close()
}


task unzipMPS(dependsOn: MPSVersionTask) {
	//doLast {
		println "mpsDownloadFile "+mpsDownloadFile
		println "mpsDownloadDir "+ mpsDownloadDir.toString()
		//println "0000 "+
		inputs.file mpsDownloadFile
		outputs.dir mpsDownloadDir
		ant.unzip src: mpsDownloadFile, dest: mpsDownloadDir
		//project.ext.mpsUnpackedDir = new File(mpsDownloadDir, mpsDownloadDir.list().first())
	//}


	def dirList = new ArrayList()
	def dir = new File(mpsDownloadDir.toString())
	dirList=dir.list()
	println dirList[0]
	//dir.eachFileRecurse (FileType.FILES) { file ->
	//	list << file
	//}
	//list.each {
	//	println it.path
	//}
	mpsUnpackedDir = new File(mpsDownloadDir, dirList[0])
	uploadVersion = dirList[0]

    //doLast {
	//	ant.unzip src: mpsDownloadFile, dest: mpsDownloadDir
	//	//project.ext.mpsUnpackedDir = new File(mpsDownloadDir, mpsDownloadDir.list().first())
	//}
}


task publishMPS(type: Zip, dependsOn: unzipMPS) {
	println "mpsUnpackedDir " + mpsUnpackedDir
	println "upload version "+uploadVersion
	setMPSVersion=mpsVersion.toString()+'-SNAPSHOT'
	println "##teamcity[setParameter name='env.mpsVersion' value=setMPSVersion]"
    from mpsUnpackedDir
}

task setVersion{
	println "mpsVersion "+mpsVersion
}
artifacts {
    'default' publishMPS
}

publishing {
    publications {
        mps(MavenPublication) {
				groupId 'com.jetbrains'
				artifactId 'mps'
				artifact publishMPS
				version setMPSVersion
			}
        }
	repositories {
        maven {
            credentials {
              username 'pgowda'
              password 'Mar2018@91'
            }
            url "https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots/"
        }
    }
}
